name: CI/CD for Salesforce Scratch Org

on:
  push:
    branches:
      - main   # Trigger the workflow for changes to the main branch or change as required

jobs:
  push-to-scratch-org:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Install Salesforce CLI
      - name: 'Install Salesforce CLI'
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
          mkdir ~/sfdx
          tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
          echo "$HOME/sfdx/bin" >> $GITHUB_PATH
          ~/sfdx/bin/sfdx version

      # Step 2: Checkout the source code (with full history)
      - name: 'Checkout code'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Step 3: Get alias based on the branch
      - name: 'Get Scratch Org Alias from Mapping File'
        id: get_alias
        run: |
          # Get the current branch name
          BRANCH_NAME=${GITHUB_REF##*/}
          echo "Branch Name: $BRANCH_NAME"

          # Read the alias from the scratch-org-mappings.json file
          ALIAS=$(jq -r ".\"$BRANCH_NAME\".alias" ./assets/scratch-org-mappings.json)
          USERNAME=$(jq -r ".\"$BRANCH_NAME\".username" ./assets/scratch-org-mappings.json)


          if [ "$ALIAS" == "null" ]; then
            echo "No alias found for branch $BRANCH_NAME"
          fi

          echo "SCRATCH_ALIAS=$ALIAS" >> $GITHUB_ENV
          echo "SCRATCH_USERNAME=$USERNAME" >> $GITHUB_ENV
          echo "::set-output name=alias::$ALIAS"
          
           # Set outputs for alias and username using environment variables instead of output
          echo "SCRATCH_ALIAS=$ALIAS" >> $GITHUB_ENV
          echo "SCRATCH_USERNAME=$USERNAME" >> $GITHUB_ENV
       
      # Step 4: Authenticate with Salesforce DevHub using JWT
      - name: 'Authenticate with DevHub'
        run: |
          echo "Authenticating DEVHUB"
          sfdx force:auth:jwt:grant --client-id=${{ secrets.SALESFORCE_DEVHUB_CONSUMER_KEY }} \
                                    --jwt-key-file=./assets/server.key \
                                    --username=${{ secrets.SALESFORCE_DEVHUB_USERNAME }} \
                                    --set-default-dev-hub \
                                    --alias DEVHUB
                                    
      # Step 4: Query Salesforce to get the LoginUrl
      - name: 'Get LoginUrl for Scratch Org'
        id: get_login_url
        run: |
          echo "Running data query to get LoginUrl for $SCRATCH_USERNAME..."
          # Run the SF query and output the raw result for debugging
          QUERY_RESULT=$(sf data query --target-org my-dev-hub --query "SELECT SignupUsername, LoginUrl FROM ScratchOrgInfo WHERE SignupUsername='$SCRATCH_USERNAME'" --json)

            # Output the raw JSON response to help with debugging
          echo "Raw query result: $QUERY_RESULT"
          LOGIN_URL=$(sf data query --target-org DEVHUB --query "SELECT SignupUsername, LoginUrl FROM ScratchOrgInfo WHERE SignupUsername='$SCRATCH_USERNAME'" --json | jq -r '.result[0].LoginUrl')

          if [ "$LOGIN_URL" == "null" ]; then
            echo "No LoginUrl found for the provided SignupUsername."
            exit 1
          fi

          echo "LoginUrl for the Scratch Org is: $LOGIN_URL"
          echo "::set-output name=login-url::$LOGIN_URL"
          
      # Step 5: Authenticate with Salesforce DevHub using JWT
      - name: 'Authenticate with DevHub'
        run: |
          echo "Authenticating DEVHUB"
          sfdx force:auth:jwt:grant --client-id=${{ secrets.SALESFORCE_DEVHUB_CONSUMER_KEY }} \
                                    --jwt-key-file=./assets/server.key \
                                    --username=${{ steps.get_alias.outputs.username }} \
                                    --alias ${{ steps.get_alias.outputs.alias }} \
                                    --instance-url ${{ steps.get_login_url.outputs.login-url }} 

      # Step 5: Push source code to Scratch Org (only changed files)
      - name: 'Push Source to Scratch Org'
        run: |
          echo "Pushing source code to Scratch Org: ${{ steps.get_alias.outputs.alias }}"
          sf project deploy start --target-org ${{ steps.get_alias.outputs.alias }} \
                                   --wait 10 --ignore-conflicts
